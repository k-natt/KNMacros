//
//  File.swift
//  
//
//  Created by Kevin on 6/24/23.
//

import SwiftSyntaxMacros
import SwiftSyntaxMacrosTestSupport
import XCTest
import KNMacrosMacros

private let testMacros: [String: Macro.Type] = [
    "openEnum": OpenMacro.self,
]

final class OpenTests: XCTestCase {
    func test() {
        assertMacroExpansion("""
        @openEnum
        enum Foo {
            case foo
            case bar, baz = "quux"
        }
        """, expandedSource: """
        enum Foo {
            case foo
            case bar, baz = "quux"
            case unknown(String)
            init?(rawValue: String) {
                self.init(rawValue)
            }
            init(_ rawValue: String) {
                switch rawValue {
                case "foo":
                    self = .foo
                case "bar":
                    self = .bar
                case "quux":
                    self = .baz
                default:
                    self = .unknown(rawValue)
                }
            }
            var rawValue: String {
                switch self {
                case .foo:
                    return "foo"
                case .bar:
                    return "bar"
                case .baz:
                    return "quux"
                case .unknown(let rawValue):
                    return rawValue
                }
            }
        }
        extension Foo: RawRepresentable {
        }
        """, macros: testMacros)
    }

    func testTwoTypes() {
        assertMacroExpansion("""
        @openEnum
        enum State {
            case foo, bar
        }
        """, expandedSource: """
        enum State {
            case foo, bar
            case unknown(String)
            init?(rawValue: String) {
                self.init(rawValue)
            }
            init(_ rawValue: String) {
                switch rawValue {
                case "foo":
                    self = .foo
                case "bar":
                    self = .bar
                default:
                    self = .unknown(rawValue)
                }
            }
            var rawValue: String {
                switch self {
                case .foo:
                    return "foo"
                case .bar:
                    return "bar"
                case .unknown(let rawValue):
                    return rawValue
                }
            }
        }
        extension State: RawRepresentable {
        }
        """, macros: testMacros)
    }
}
